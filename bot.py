import os
import logging
import re
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —á–µ—Ä—Ç–µ–∂–∏
PACKAGES = [
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä–∏–Ω–∞
    (250, 350, 90, "–ü–∞–∫–µ—Ç –≤–µ—Ä—Ç. –¥250 —à90 –≤350 / —Å —Ä—É—á–∫–∞–º–∏ / –®—Ç–∞–º–ø 1158", "https://disk.360.yandex.ru/d/Peyk8BPpIlnZhA"),
    (100, 120, 90, "–ü–∞–∫–µ—Ç –≤–µ—Ä—Ç. –¥100 —à90 –≤120 / –®—Ç–∞–º–ø 512", "https://disk.360.yandex.ru/d/3-yN-eN1W8_oFA"),
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    (220, 220, 120, "–ü–∞–∫–µ—Ç –¥220 —à120 –≤220 / –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –ø–æ–¥ –ª–µ–Ω—Ç—ã / –®—Ç–∞–º–ø 846", "https://disk.360.yandex.ru/d/P2TtXuwkP1MpAQ"),
]

def get_package_type(description):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    if "–≤–µ—Ä—Ç." in description.lower():
        return "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
    elif "–≥–æ—Ä." in description.lower():
        return "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
    elif "–∫–≤." in description.lower():
        return "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π"
    else:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

def get_requested_type(length, height, width):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    if length > height:
        return "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
    elif height > length:
        return "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
    else:
        return "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π"

def find_matching_packages_by_type(length, height, width, package_type, max_results=5):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞–∫–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º —Å –¥–æ–ø—É—Å–∫–æ–º 50–º–º"""
    all_matching = []
    
    for pkg_length, pkg_height, pkg_width, desc, _ in PACKAGES:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞
        current_type = get_package_type(desc)
        if current_type != package_type:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –¥–æ–ø—É—Å–∫–æ–º 50–º–º
        if (abs(pkg_length - length) <= 50 and 
            abs(pkg_height - height) <= 50 and 
            abs(pkg_width - width) <= 50):
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            total_diff = (abs(pkg_length - length) + 
                         abs(pkg_height - height) + 
                         abs(pkg_width - width))
            
            all_matching.append((pkg_length, pkg_height, pkg_width, desc, total_diff))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    all_matching.sort(key=lambda x: x[4])
    
    return [(l, h, w, d) for l, h, w, d, _ in all_matching[:max_results]]

def get_package_details(length, height, width, description):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ"""
    # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    drawing_url = None
    for pkg_length, pkg_height, pkg_width, desc, url in PACKAGES:
        if (pkg_length == length and pkg_height == height and 
            pkg_width == width and desc == description):
            drawing_url = url
            break
    
    if drawing_url:
        details = (
            "üìã <b>–î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞</b>\n\n"
            f"üì¶ –†–∞–∑–º–µ—Ä: {length} √ó {height} √ó {width} –º–º\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ—Ä—Ç–µ–∂:</b>\n"
            f"{drawing_url}"
        )
    else:
        details = (
            "üìã <b>–î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞</b>\n\n"
            f"üì¶ –†–∞–∑–º–µ—Ä: {length} √ó {height} √ó {width} –º–º\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            "‚è≥ <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ –∑–∞–∫–∞–∑–∞-—à–∞–±–ª–æ–Ω–∞ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ—Ä—Ç–µ–∂ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</i>"
        )
    
    return details, drawing_url

async def create_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    global application
    if application is None:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(handle_package_click, pattern="^package_"))
        application.add_handler(CallbackQueryHandler(handle_alternative_search, pattern="^alternative_"))
        application.add_handler(CallbackQueryHandler(handle_back_to_last_search, pattern="^back_to_last_search$"))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.initialize()
        await application.start()
    
    return application

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.

üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   <b>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</b>
   
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>200 250 100</code>

‚ùó <b>–ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤:</b> –¥–ª–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ √ó —à–∏—Ä–∏–Ω–∞

–Ø –Ω–∞–π–¥—É –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞–∫–µ—Ç—ã (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ 50 –º–º).
    """
    await update.message.reply_html(welcome_text)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        text = update.message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        cleaned_text = re.sub(r'[^\d\s]', ' ', text)
        numbers = re.findall(r'\d+', cleaned_text)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–∞: {numbers}")
        
        if len(numbers) < 3:
            await update.message.reply_html(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞: <b>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>200 250 100</code>"
            )
            return

        length, height, width = map(int, numbers[:3])
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã: {length}√ó{height}√ó{width}")
        
        requested_type = get_requested_type(length, height, width)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ç–∏–ø
        context.user_data['original_sizes'] = (length, height, width)
        context.user_data['original_type'] = requested_type
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await show_search_results(update, context, length, height, width, requested_type)
        
    except Exception as e:
        logger.error(f"Error in handle_text: {e}")
        await update.message.reply_html(
            "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>400 300 150</code>"
        )

async def show_search_results(update, context, length, height, width, search_type, is_alternative=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['current_sizes'] = (length, height, width)
        context.user_data['current_type'] = search_type
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        matching_packages = find_matching_packages_by_type(length, height, width, search_type, max_results=5)
        
        if search_type == "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π":
            type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
        elif search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
            type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
        else:
            type_display = "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ"
        
        if is_alternative:
            response = f"üì¶ <b>{type_display.capitalize()} –ø–∞–∫–µ—Ç—ã</b> –¥–ª—è {length}√ó{height}√ó{width} –º–º (–¥√ó–≤√ó—à):\n\n"
        else:
            response = f"üì¶ <b>{type_display.capitalize()} –ø–∞–∫–µ—Ç—ã</b> –¥–ª—è {length}√ó{height}√ó{width} –º–º (–¥√ó–≤√ó—à, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±50 –º–º):\n\n"
        
        if matching_packages:
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            keyboard = []
            
            for i, (l, h, w, d) in enumerate(matching_packages, 1):
                response += f"üòä {i}. {l} √ó {h} √ó {w} –º–º\n   {d}\n\n"
                # –°–æ–∑–¥–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ: package_L_H_W
                callback_data = f"package_{l}_{h}_{w}"
                keyboard.append([InlineKeyboardButton(f"üì¶ –ü–∞–∫–µ—Ç {i}: {l}√ó{h}√ó{w} –º–º", callback_data=callback_data)])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–Ω–æ–ø–∫–∏
            alt_length, alt_height = height, length  # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –¥–ª–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
            
            if search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
                alt_type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
                alt_type = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
            else:
                alt_type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
                alt_type = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            alt_callback = f"alternative_{alt_length}_{alt_height}_{width}_{alt_type}"
            keyboard.append([InlineKeyboardButton(f"üîç –ü–æ–∫–∞–∑–∞—Ç—å {alt_type_display}", callback_data=alt_callback)])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'message'):
                await update.message.reply_html(response, reply_markup=reply_markup)
            else:
                await update.edit_message_text(text=response, parse_mode='HTML', reply_markup=reply_markup)
        else:
            response += "‚ùå –ü–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–Ω–æ–ø–∫–∏
            alt_length, alt_height = height, length
            
            if search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
                alt_type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
                alt_type = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
            else:
                alt_type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
                alt_type = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
            
            keyboard = [[InlineKeyboardButton(f"üîç –ü–æ–∫–∞–∑–∞—Ç—å {alt_type_display}", callback_data=f"alternative_{alt_length}_{alt_height}_{width}_{alt_type}")]]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'message'):
                await update.message.reply_html(response, reply_markup=reply_markup)
            else:
                await update.edit_message_text(text=response, parse_mode='HTML', reply_markup=reply_markup)
                
    except Exception as e:
        logger.error(f"Error in show_search_results: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–∫–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if hasattr(update, 'message'):
            await update.message.reply_html(error_msg)
        else:
            await update.edit_message_text(text=error_msg, parse_mode='HTML')

async def handle_package_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –ø–∞–∫–µ—Ç—É"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = query.data
        
        if callback_data.startswith("package_"):
            # –§–æ—Ä–º–∞—Ç: package_L_H_W
            parts = callback_data.split("_")
            if len(parts) == 4:
                length = int(parts[1])
                height = int(parts[2])
                width = int(parts[3])
                
                # –ù–∞—Ö–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                description = ""
                for pkg_length, pkg_height, pkg_width, desc, _ in PACKAGES:
                    if pkg_length == length and pkg_height == height and pkg_width == width:
                        description = desc
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ –∏ —Å—Å—ã–ª–∫—É
                details, drawing_url = get_package_details(length, height, width, description)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞
                current_sizes = context.user_data.get('current_sizes', (0, 0, 0))
                current_type = context.user_data.get('current_type', '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π')
                
                if current_type == "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π":
                    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º"
                else:
                    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º"
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                context.user_data['last_search_sizes'] = current_sizes
                context.user_data['last_search_type'] = current_type
                
                keyboard.append([InlineKeyboardButton(back_text, callback_data="back_to_last_search")])
                
                # –ö–Ω–æ–ø–∫–∞ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if drawing_url:
                    keyboard.append([InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=drawing_url)])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=details,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
    except Exception as e:
        logger.error(f"Error in handle_package_click: {e}")

async def handle_alternative_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –§–æ—Ä–º–∞—Ç: alternative_L_H_W_type
        parts = query.data.split("_")
        if len(parts) == 5:
            length = int(parts[1])
            height = int(parts[2])
            width = int(parts[3])
            search_type = parts[4]  # "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π" –∏–ª–∏ "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await show_search_results(query, context, length, height, width, search_type, is_alternative=True)
    except Exception as e:
        logger.error(f"Error in handle_alternative_search: {e}")

async def handle_back_to_last_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞ –∏–∑ –¥–µ—Ç–∞–ª–µ–π –ø–∞–∫–µ—Ç–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–∏—Å–∫–∞
        last_sizes = context.user_data.get('last_search_sizes')
        last_type = context.user_data.get('last_search_type')
        
        if last_sizes and last_type:
            length, height, width = last_sizes
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            is_alternative = (last_sizes != context.user_data.get('original_sizes', last_sizes))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            await show_search_results(query, context, length, height, width, last_type, is_alternative=is_alternative)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã.",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error in handle_back_to_last_search: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html("""
üìã <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: <code>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</code>  
2Ô∏è‚É£ –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω ‚Äî –¥–ª–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ √ó —à–∏—Ä–∏–Ω–∞  
3Ô∏è‚É£ –ë–æ—Ç –ø–æ–¥–±–µ—Ä—ë—Ç –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞–∫–µ—Ç—ã (¬±50 –º–º)
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –ø–∞–∫–µ—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏
5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>  
<code>200 250 100</code>  
<code>300 400 150</code>  
<code>400 300 150</code>

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!
    """)

@app.route('/webhook', methods=['POST'])
async def webhook():
    """Async endpoint –¥–ª—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = request.get_json()
        
        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        update = Update.de_json(json_data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.process_update(update)
        
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({"status": "error"}), 500

@app.route('/health', methods=['GET'])
def health():
    return "OK"

@app.route('/')
def home():
    return "Telegram Bot is running!"

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global application
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_package_click, pattern="^package_"))
    application.add_handler(CallbackQueryHandler(handle_alternative_search, pattern="^alternative_"))
    application.add_handler(CallbackQueryHandler(handle_back_to_last_search, pattern="^back_to_last_search$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    render_external_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_external_url:
        webhook_url = f"{render_external_url}/webhook"
        await application.bot.delete_webhook()
        await application.bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.warning("‚ùå RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook
    asyncio.run(setup_webhook())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

if __name__ == "__main__":
    run_bot()
