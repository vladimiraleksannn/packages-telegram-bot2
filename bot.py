import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
PACKAGES = [
    # –ü—Ä–∏–º–µ—Ä —Å –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º
    (250, 350, 90, "–ü–∞–∫–µ—Ç –≤–µ—Ä—Ç. –¥250 —à90 –≤350 / —Å —Ä—É—á–∫–∞–º–∏ / –®—Ç–∞–º–ø 1158", "https://disk.360.yandex.ru/d/Peyk8BPpIlnZhA"),
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
]

def get_package_type(description):
    if "–≤–µ—Ä—Ç." in description.lower():
        return "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
    elif "–≥–æ—Ä." in description.lower():
        return "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
    elif "–∫–≤." in description.lower():
        return "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π"
    else:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

def get_requested_type(length, height, width):
    if length > height:
        return "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
    elif height > length:
        return "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
    else:
        return "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π"

def find_matching_packages_by_type(length, height, width, package_type, max_results=5):
    all_matching = []
    
    for pkg_length, pkg_height, pkg_width, desc, _ in PACKAGES:
        current_type = get_package_type(desc)
        if current_type != package_type:
            continue
            
        if (abs(pkg_length - length) <= 50 and 
            abs(pkg_height - height) <= 50 and 
            abs(pkg_width - width) <= 50):
            
            total_diff = (abs(pkg_length - length) + 
                         abs(pkg_height - height) + 
                         abs(pkg_width - width))
            
            all_matching.append((pkg_length, pkg_height, pkg_width, desc, total_diff))
    
    all_matching.sort(key=lambda x: x[4])
    return [(l, h, w, d) for l, h, w, d, _ in all_matching[:max_results]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.

üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   <b>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</b>
   
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>200 250 100</code>

‚ùó <b>–ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤:</b> –¥–ª–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ √ó —à–∏—Ä–∏–Ω–∞

–Ø –Ω–∞–π–¥—É –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞–∫–µ—Ç—ã (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ 50 –º–º).
    """
    await update.message.reply_html(welcome_text)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        text = update.message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        cleaned_text = re.sub(r'[^\d\s]', ' ', text)
        numbers = re.findall(r'\d+', cleaned_text)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–∞: {numbers}")
        
        if len(numbers) < 3:
            await update.message.reply_html(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞: <b>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>200 250 100</code>"
            )
            return

        length, height, width = map(int, numbers[:3])
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã: {length}√ó{height}√ó{width}")
        
        requested_type = get_requested_type(length, height, width)
        
        context.user_data['original_sizes'] = (length, height, width)
        context.user_data['original_type'] = requested_type
        
        await show_search_results(update, context, length, height, width, requested_type)
        
    except Exception as e:
        logger.error(f"Error in handle_text: {e}")
        await update.message.reply_html(
            "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¥–ª–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ —à–∏—Ä–∏–Ω–∞</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>400 300 150</code>"
        )

async def show_search_results(update, context, length, height, width, search_type, is_alternative=False):
    try:
        context.user_data['current_sizes'] = (length, height, width)
        context.user_data['current_type'] = search_type
        
        matching_packages = find_matching_packages_by_type(length, height, width, search_type, max_results=5)
        
        if search_type == "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π":
            type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
        elif search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
            type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
        else:
            type_display = "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ"
        
        if is_alternative:
            response = f"üì¶ <b>{type_display.capitalize()} –ø–∞–∫–µ—Ç—ã</b> –¥–ª—è {length}√ó{height}√ó{width} –º–º (–¥√ó–≤√ó—à):\n\n"
        else:
            response = f"üì¶ <b>{type_display.capitalize()} –ø–∞–∫–µ—Ç—ã</b> –¥–ª—è {length}√ó{height}√ó{width} –º–º (–¥√ó–≤√ó—à, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±50 –º–º):\n\n"
        
        if matching_packages:
            keyboard = []
            
            for i, (l, h, w, d) in enumerate(matching_packages, 1):
                response += f"üòä {i}. {l} √ó {h} √ó {w} –º–º\n   {d}\n\n"
                callback_data = f"package_{l}_{h}_{w}"
                keyboard.append([InlineKeyboardButton(f"üì¶ –ü–∞–∫–µ—Ç {i}: {l}√ó{h}√ó{w} –º–º", callback_data=callback_data)])
            
            alt_length, alt_height = height, length
            
            if search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
                alt_type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
                alt_type = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
            else:
                alt_type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
                alt_type = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
            
            alt_callback = f"alternative_{alt_length}_{alt_height}_{width}_{alt_type}"
            keyboard.append([InlineKeyboardButton(f"üîç –ü–æ–∫–∞–∑–∞—Ç—å {alt_type_display}", callback_data=alt_callback)])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'message'):
                await update.message.reply_html(response, reply_markup=reply_markup)
            else:
                await update.edit_message_text(text=response, parse_mode='HTML', reply_markup=reply_markup)
        else:
            response += "‚ùå –ü–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
            
            alt_length, alt_height = height, length
            
            if search_type == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π":
                alt_type_display = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"
                alt_type = "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"
            else:
                alt_type_display = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ"
                alt_type = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π"
            
            keyboard = [[InlineKeyboardButton(f"üîç –ü–æ–∫–∞–∑–∞—Ç—å {alt_type_display}", callback_data=f"alternative_{alt_length}_{alt_height}_{width}_{alt_type}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'message'):
                await update.message.reply_html(response, reply_markup=reply_markup)
            else:
                await update.edit_message_text(text=response, parse_mode='HTML', reply_markup=reply_markup)
                
    except Exception as e:
        logger.error(f"Error in show_search_results: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–∫–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if hasattr(update, 'message'):
            await update.message.reply_html(error_msg)
        else:
            await update.edit_message_text(text=error_msg, parse_mode='HTML')

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CallbackQueryHandler(handle_package_click, pattern="^package_"))
application.add_handler(CallbackQueryHandler(handle_alternative_search, pattern="^alternative_"))
application.add_handler(CallbackQueryHandler(handle_back_to_last_search, pattern="^back_to_last_search$"))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

@app.route('/webhook', methods=['POST'])
async def webhook():
    """Async endpoint –¥–ª—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = request.get_json()
        logger.info(f"Received webhook: {json_data}")
        
        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        update = Update.de_json(json_data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.process_update(update)
        
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({"status": "error"}), 500

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "healthy"})

@app.route('/')
def home():
    return "Telegram Bot is running!"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    render_external_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_external_url:
        webhook_url = f"{render_external_url}/webhook"
        await application.bot.delete_webhook()
        await application.bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.warning("‚ùå RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º app.run() –≤ production, Render —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç gunicorn
    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
